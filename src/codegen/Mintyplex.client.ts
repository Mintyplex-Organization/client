/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, CollectionParams, MintParams, QueryMsg, Addr, ConfigResponse, Config } from "./Mintyplex.types";
export interface MintyplexReadOnlyInterface {
  contractAddress: string;
  queryConfig: () => Promise<ConfigResponse>;
}
export class MintyplexQueryClient implements MintyplexReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.queryConfig = this.queryConfig.bind(this);
  }

  queryConfig = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_config: {}
    });
  };
}
export interface MintyplexInterface extends MintyplexReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createCollection: ({
    codeId,
    name,
    symbol
  }: {
    codeId: number;
    name: string;
    symbol: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintNFT: ({
    codeId,
    owner,
    tokenId,
    tokenUri
  }: {
    codeId: number;
    owner: string;
    tokenId: string;
    tokenUri: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MintyplexClient extends MintyplexQueryClient implements MintyplexInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createCollection = this.createCollection.bind(this);
    this.mintNFT = this.mintNFT.bind(this);
  }

  createCollection = async ({
    codeId,
    name,
    symbol
  }: {
    codeId: number;
    name: string;
    symbol: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_collection: {
        code_id: codeId,
        name,
        symbol
      }
    }, fee, memo, _funds);
  };
  mintNFT = async ({
    codeId,
    owner,
    tokenId,
    tokenUri
  }: {
    codeId: number;
    owner: string;
    tokenId: string;
    tokenUri: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_n_f_t: {
        code_id: codeId,
        owner,
        token_id: tokenId,
        token_uri: tokenUri
      }
    }, fee, memo, _funds);
  };
}