/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin, StdFee } from "@cosmjs/amino";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { InstantiateMsg, ExecuteMsg, Addr, CollectionParams, MintParams, WithdrawParams, Config, UpdateMintFeeParams } from "./Mintyplex.types";
export interface MintyplexInterface {
  contractAddress: string;
  sender: string;
  createCollection: ({
    codeId,
    mintFee,
    name,
    symbol
  }: {
    codeId: number;
    mintFee: number;
    name: string;
    symbol: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mintNFT: ({
    codeId,
    collectionAddress,
    collectionCreator,
    collectionName,
    owner,
    tokenUri
  }: {
    codeId: number;
    collectionAddress: Addr;
    collectionCreator: Addr;
    collectionName: string;
    owner: string;
    tokenUri: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    withdrawAddress,
    withdrawAmount
  }: {
    withdrawAddress: Addr;
    withdrawAmount: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    mintPercent,
    owner
  }: {
    mintPercent: number;
    owner: Addr;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMintFee: ({
    collectionName,
    mintFee
  }: {
    collectionName: string;
    mintFee: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MintyplexClient implements MintyplexInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createCollection = this.createCollection.bind(this);
    this.mintNFT = this.mintNFT.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.updateMintFee = this.updateMintFee.bind(this);
  }

  createCollection = async ({
    codeId,
    mintFee,
    name,
    symbol
  }: {
    codeId: number;
    mintFee: number;
    name: string;
    symbol: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_collection: {
        code_id: codeId,
        mint_fee: mintFee,
        name,
        symbol
      }
    }, fee, memo, _funds);
  };
  mintNFT = async ({
    codeId,
    collectionAddress,
    collectionCreator,
    collectionName,
    owner,
    tokenUri
  }: {
    codeId: number;
    collectionAddress: Addr;
    collectionCreator: Addr;
    collectionName: string;
    owner: string;
    tokenUri: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_n_f_t: {
        code_id: codeId,
        collection_address: collectionAddress,
        collection_creator: collectionCreator,
        collection_name: collectionName,
        owner,
        token_uri: tokenUri
      }
    }, fee, memo, _funds);
  };
  withdraw = async ({
    withdrawAddress,
    withdrawAmount
  }: {
    withdrawAddress: Addr;
    withdrawAmount: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        withdraw_address: withdrawAddress,
        withdraw_amount: withdrawAmount
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    mintPercent,
    owner
  }: {
    mintPercent: number;
    owner: Addr;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        mint_percent: mintPercent,
        owner
      }
    }, fee, memo, _funds);
  };
  updateMintFee = async ({
    collectionName,
    mintFee
  }: {
    collectionName: string;
    mintFee: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_mint_fee: {
        collection_name: collectionName,
        mint_fee: mintFee
      }
    }, fee, memo, _funds);
  };
}